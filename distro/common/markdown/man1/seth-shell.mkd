seth-shell(1) -- Interactive Seth Console
=========================================

## SYNOPSIS

__seth-shell__ [_named configuration_] _(options)_

  * `-S`, `--server seth_SERVER_URL`:
    The seth server URL
  * `-z`, `--client`:
    seth-client mode
  * `-c`, `--config CONFIG`:
    The configuration file to use
  * `-j`, `--json-attributes JSON_ATTRIBS`:
    Load attributes from a JSON file or URL
  * `-l`, `--log-level LOG_LEVEL`:
    Set the logging level
  * `-s`, `--solo`:
    seth-solo session
  * `-a`, `--standalone`:
    standalone session
  * `-v`, `--version`:
    Show seth version
  * `-h`, `--help`:
    Show command options

When no --config option is specified, seth-shell attempts to load a
default configuration file:

* If a _named configuration_ is given, seth-shell will load ~/.seth/_named
  configuration_/seth_shell.rb
* If no _named configuration_ is given seth-shell will load
  ~/.seth/seth_shell.rb if it exists
* seth-shell falls back to loading /etc/seth/client.rb or
/etc/seth/solo.rb if -z or -s options are given and no seth_shell.rb
can be found.
* The --config option takes precedence over implicit configuration
  paths.

## DESCRIPTION

`seth-shell` is an irb(1) (interactive ruby) session customized for Seth.
`seth-shell` serves two primary functions: it provides a means to
interact with a Seth Server interactively using a convenient DSL; it
allows you to define and run Seth recipes interactively.

## SYNTAX

seth-shell uses irb's subsession feature to provide multiple modes of
interaction. In addition to the primary mode which is entered on start,
`recipe` and `attributes` modes are available.

## PRIMARY MODE
The following commands are available in the primary
session:

  * `help`:
    Prints a list of available commands
  * `version`:
    Prints the Seth version
  * `recipe`:
    Switches to `recipe` mode
  * `attributes`:
    Switches to `attributes` mode
  * `run_seth`:
    Initiates a seth run
  * `reset`:
    reinitializes seth-shell session
  * `echo :on|:off`:
    Turns irb's echo function on or off. Echo is _on_ by default.
  * `tracing :on|:off`:
    Turns irb's function tracing feature on or off. Tracing is extremely
    verbose and expected to be of interest primarily to developers.
  * `node`:
    Returns the _node_ object for the current host. See ceth-node(1)
    for more information about nodes.
  * `ohai`:
    Prints the attributes of _node_

In addition to these commands, seth-shell provides a DSL for accessing
data on the Seth Server. When working with remote data in seth-shell, you
chain method calls in the form _object type_._operation_, where
_object type_ is in plural form. The following object types are
available:

  * `nodes`
  * `roles`
  * `data_bags`
  * `clients`
  * `cookbooks`

For each _object type_ the following operations are available:

  * _object type_.all(_&block_):
    Loads all items from the server. If the optional code _block_ is
    given, each item will be passed to the block and the results
    returned, similar to ruby's `Enumerable#map` method.
  * _object type_.show(_object name_):
    Aliased as _object type_.load

    Loads the singular item identified by _object name_.
  * _object type_.search(_query_, _&block_):
    Aliased as _object type_.find

    Runs a search against the server and returns the matching items. If
    the optional code _block_ is given each item will be passed to the
    block and the results returned.

    The _query_ may be a Solr/Lucene format query given as a String, or
    a Hash of conditions. If a Hash is given, the options will be ANDed
    together. To join conditions with OR, use negative queries, or any
    advanced search syntax, you must provide give the query in String
    form.
  * _object type_.transform(:all|_query_, _&block_):
    Aliased as _object type_.bulk_edit

    Bulk edit objects by processing them with the (required) code _block_.
    You can edit all objects of the given type by passing the Symbol
    `:all` as the argument, or only a subset by passing a _query_ as the
    argument. The _query_ is evaluated in the same way as with
    __search__.

    The return value of the code _block_ is used to alter the behavior
    of `transform`. If the value returned from the block is `nil` or
    `false`, the object will not be saved. Otherwise, the object is
    saved after being passed to the block. This behavior can be
    exploited to create a dry run to test a data transformation.

## RECIPE MODE
Recipe mode implements Seth's recipe DSL. Exhaustively documenting this
DSL is outside the scope of this document. See the following pages in
the Seth documentation for more information:

  * <http://wiki.opscode.com/display/seth/Resources>
  * <http://wiki.opscode.com/display/seth/Recipes>

Once you have defined resources in the recipe, you can trigger a
convergence run via `run_seth`

## EXAMPLES

* A "Hello World" interactive recipe

  seth > recipe
  seth:recipe > echo :off
  seth:recipe > file "/tmp/hello\_world"
  seth:recipe > run\_seth
  [Sat, 09 Apr 2011 08:56:56 -0700] INFO: Processing file[/tmp/hello\_world] action create ((irb#1) line 2)
  [Sat, 09 Apr 2011 08:56:56 -0700] INFO: file[/tmp/hello\_world] created file /tmp/hello\_world
  seth:recipe > pp ls '/tmp'
  [".",
  "..",
  "hello\_world"]

* Search for _nodes_ by role, and print their IP addresses

  seth > nodes.find(:roles => 'monitoring-server') {|n| n[:ipaddress] }
  => ["10.254.199.5"]

* Remove the role _obsolete_ from every node in the system

  seth > nodes.transform(:all) {|n| n.run\_list.delete('role[obsolete]') }
   => [node[seth098b2.opsseth.com], node[ree-woot], node[graphite-dev], node[fluke.localdomain], node[ghost.local], node[kallistec]]


## BUGS

`seth-shell` often does not perfectly replicate the context in which
seth-client(8) configures a host, which may lead to discrepancies in
observed behavior.

`seth-shell` has to duplicate much code from seth-client's internal
libraries and may become out of sync with the behavior of those
libraries.

## SEE ALSO

  seth-client(8) ceth(1)
  <http://wiki.opscode.com/display/seth/Seth+Shell>

## AUTHOR

   Seth was written by Adam Jacob <adam@opscode.com> with many
   contributions from the community. seth-shell was written by Daniel
   DeLeo.

## DOCUMENTATION

   This manual page was written by Daniel DeLeo <dan@opscode.com>.
   Permission is granted to copy, distribute and / or modify this
   document under the terms of the Apache 2.0 License.

## seth

   seth-shell is distributed with Seth. <http://wiki.opscode.com/display/seth/Home>
