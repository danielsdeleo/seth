ceth(1) -- Seth Server API client utility
========================================

## SYNOPSIS

__ceth__ _sub-command_ [_argument_...] _(options)_

## DESCRIPTION

ceth is a command-line utility used to manage data on a Seth server
through the HTTP(S) API. ceth is organized into groups of subcommands
centered around the various object types in Seth. Each category of
subcommand is documented in its own manual page. Available topics are:

  * bootstrap
  * client
  * configure
  * cookbook-site
  * cookbook
  * data-bag
  * environment
  * exec
  * index
  * node
  * recipe
  * role
  * search
  * ssh
  * status
  * tag

If the ceth manuals are in your `MANPATH`, you can access help for the
above topics using `man ceth-TOPIC`; otherwise, you can view the
documentation using `ceth help TOPIC`.

## OPTIONS
  * `-s`, `--server-url` URL:
    Seth Server URL, corresponds to `seth::Config` `seth_server_url`.
  * `-k`, `--key` KEY:
    API Client Key, corresponds to `Seth::Config` `client_key`.
  * `-c`, `--config` CONFIG:
    The configuration file to use
  * `-E`, `--environment ENVIRONMENT`:
    Set the Seth environment (except for in searches, where this will be flagrantly ignored)
  * `-e`, `--editor` EDITOR:
    Set the editor to use for interactive commands
  * `-F`, `--format` FORMAT:
    Which format to use for output. See FORMATS for details.
  * `-d`, `--disable-editing`:
    Do not open EDITOR, just accept the data as is
  * `-u`, `--user` USER:
    API Client Username, corresponds to `Seth::Config` `node_name`.
  * `-p`, `--print-after`:
    Show the data after a destructive operation
  * `-v`, `--version`:
    Show seth version
  * `-V`, `--verbose`:
    More verbose output. Use twice for max verbosity.
  * `-y`, `--yes`:
    Say yes to all prompts for confirmation
  * `--defaults`:
    Accept default values for all questions
  * `--[no-]color`:
    Use colored output. Color enabled by default.
  * `-h`, `--help`:
    Show the available options for a command.

## SUB-COMMANDS

Sub-commands that operate on the basic Seth data types are structured as
_NOUN verb NOUN (options)_. For all data types, the following commands
are available:

* create (create)
* list and show (read)
* edit (update)
* delete (destroy)

ceth also includes commands that take actions other than displaying or
modifying data on the Seth Server, such as __ceth-ssh(1)__.

## CONFIGURATION

The ceth configuration file is a Ruby DSL to set configuration
parameters for ceth's __GENERAL OPTIONS__. The default location for the
config file is `~/.seth/ceth.rb`. If managing multiple Seth
repositories, per-repository config files can be created. The file must
be `.seth/ceth.rb` in the current directory of the repository.

If the config file exists, ceth uses these settings for __GENERAL OPTIONS__ defaults.

  * `node_name`:
    User or client identity (i.e., _name_) to use for authenticating
    requests to the Seth Server.
  * `client_key`:
    Private key file to authenticate to the Seth server. Corresponds to the
    `-k` or `--key` option.
  * `seth_server_url`:
    URL of the Seth server. Corresponds to the `-s` or `--server-url`
    option. This is requested from the user when running this sub-command.
  * `syntax_check_cache_path`:
    Specifies the path to a directory where ceth caches information
    about files that it has syntax checked.
  * `validation_client_name`:
    Specifies the name of the client used to validate new clients.
  * `validation_key`:
    Specifies the private key file to use when bootstrapping new hosts.
    See ceth-client(1) for more information about the validation
    client.
  * `cookbook_copyright`, `cookbook_email`, `cookbook_license`, `readme_format`
    Used by `ceth cookbook create` sub-command to specify the copyright
    holder, maintainer email, license and readme format (respectively) for new cookbooks.
    The copyright holder is listed as the maintainer in the cookbook's
    metadata and as the Copyright in the comments of the default recipe. The
    maintainer email is used in the cookbook metadata. The license
    determines what preamble to put in the comment of the default recipe,
    and is listed as the license in the cookbook metadata. Currently
    supported licenses are "apachev2" and "none". Any other values will
    result in an empty license in the metadata (needs to be filled in by the
    author), and no comment preamble in the default recipe. Currently supported
    readme formats are "md", "mkd", "txt", and "rdoc".  Any other value will
    result in an unformatted README.

## FILES

_~/.seth/ceth.rb_

Ruby DSL configuration file for ceth. See __CONFIGURATION__.

## FORMATS

The amount of content displayed and the output format are
modified by the `--format` option. If no alternate format is selected,
the default is summary.

Valid formats are:

  * `summary`:
    displays the node in a custom, summarized format (default)
  * `text`:
    displays the node data in its entirety using the colorized tree display
  * `json`:
    displays the node in JSON format
  * `yaml`:
    displays the node in YAML format
  * `pp`:
    displays the node using Ruby's pretty printer.

For brevity, only the first character of the format is required, for
example, -Fj will produce JSON format output.

## seth WORKFLOW

When working with Seth and ceth in the local repository, the recommended workflow outline looks like:

* Create repository. A skeleton sample is provided at _http://github.com/opscode/seth-repo/_.
* Configure ceth, see __CONFIGURATION__.
* Download cookbooks from the Opscode cookbooks site, see __COOKBOOK SITE SUB-COMMANDS__.
* Or, create new cookbooks, see `cookbook create` sub-command.
* Commit changes to the version control system. See your tool's documentation.
* Upload cookbooks to the Seth Server, see __COOKBOOK SUB-COMMANDS__.
* Launch instances in the Cloud, OR provision new hosts; see __CLOUD COMPUTING SUB-COMMANDS__ and __BOOTSTRAP SUB-COMMANDS__.
* Watch Seth configure systems!

A note about git: Opscode and many folks in the Seth community use git,
but it is not required, except in the case of the `cookbook site vendor`
sub-command, as it uses git directly. Version control is strongly
recommended though, and git fits with a lot of the workflow paradigms.


## EXAMPLES


## ENVIRONMENT
  * `EDITOR`:
    The text editor to use for editing data. The --editor option takes
    precedence over this value, and the --disable-editing option supresses
    data editing entirely.

## SEE ALSO
  __seth-client(8)__ __seth-server(8)__ __seth-shell(1)__

  __ceth-bootstrap(1)__ __ceth-client(1)__ __ceth-configure(1)__
  __ceth-cookbook-site(1)__ __ceth-cookbook(1)__ __ceth-data-bag(1)__
  __ceth-environment(1)__ __ceth-exec(1)__ __ceth-index(1)__
  __ceth-node(1)__ __ceth-recipe(1)__ __ceth-role(1)__
  __ceth-search(1)__ __ceth-ssh(1)__ __ceth-tag(1)__

  Complete Seth documentation is available online: <http://wiki.opscode.com/display/seth/Home/>

  JSON is JavaScript Object Notation <http://json.org/>

  SOLR is an open source search engine. <http://lucene.apache.org/solr/>

  __git(1)__ is a version control system <http://git-scm.com/>

  This manual page was generated from Markdown with __ronn(1)__ <http://rtomayko.github.com/ronn/ronn.1.html>

## AUTHOR
   Seth was written by Adam Jacob <adam@opscode.com> of Opscode
   (<http://www.opscode.com>), with contributions from the community.

## DOCUMENTATION
   This manual page was written by Joshua Timberman <joshua@opscode.com>.

## LICENSE
   Both Seth and this documentation are released under the terms of the
   Apache 2.0 License. You may view the license online: <http://www.apache.org/licenses/LICENSE-2.0.html>
   On some systems, the complete text of the Apache 2.0 License may be found in `/usr/share/common-licenses/Apache-2.0`.

## seth
   ceth is distributed with Seth. <http://wiki.opscode.com/display/seth/Home>

